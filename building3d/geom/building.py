"""Building class"""
from __future__ import annotations

import numpy as np

from building3d import random_id
from building3d.geom.point import Point
from building3d.geom.zone import Zone
from building3d.geom.solid import Solid
import building3d.mesh.mesh as mesh
from building3d.config import MESH_DELTA


class Building:
    """Building is a collection of zones.

    Zones do not have to be adjacent. They can be even separate buildings.
    """

    def __init__(self, name: str | None = None, uid: str | None = None):
        if name is None:
            name = random_id()
        self.name = name
        if uid is not None:
            self.uid = uid
        else:
            self.uid = random_id()
        self.zones: dict[str, Zone] = {}
        self.mesh = mesh.Mesh()

    def add_zone(self, zone: Zone) -> None:
        """Add a Zone instance."""
        self.zones[zone.name] = zone

    def volume(self) -> float:
        """Calculate building volume as the sum of zone volumes."""
        volume = 0.0
        for z in self.zones.values():
            volume += z.volume()
        return volume

    def get_mesh(
        self,
        only_parents: bool = True,
    ) -> tuple[list[Point], list[tuple[int, ...]]]:
        """Get vertices and faces of this building's polygons.

        This function returns faces generated by the ear-clipping algorithm.

        Args:
            only_parents: if True, only the parent polygons are returned

        Return:
            tuple of vertices and faces
        """
        verts = []
        faces = []

        for z in self.zones.values():
            offset = len(verts)
            v, f = z.get_mesh(only_parents)
            verts.extend(v)
            f = np.array(f) + offset
            f = [tuple(x) for x in f]
            faces.extend(f)

        return verts, faces

    def generate_simulation_mesh(
        self,
        delta: float | None = None,
        include_volumes: bool = False,
    ) -> None:
        """Generate mesh suitable for numerical simulations.

        Generates surface mesh by default (`PolyMesh`).
        If `include_volumes` is `True`, generates also the volume mesh (`SolidMesh`).

        Args:
            delta: approximate element size, will use default is `None`
            include_volumes: if True, will generate surface and volume meshes
        """
        if delta is None:
            delta = MESH_DELTA

        self.mesh = mesh.Mesh(delta=delta)

        for zone in self.zones.values():
            self.mesh.add_zone(zone)

        self.mesh.generate(solidmesh=include_volumes)
