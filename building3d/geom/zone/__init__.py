import logging
from typing import Sequence

from building3d import random_id
from building3d.geom.exceptions import GeometryError
from building3d.geom.paths import PATH_SEP
from building3d.geom.paths.validate_name import validate_name
from building3d.geom.bboxes import bounding_box
from building3d.geom.solid import Solid
from building3d.geom.types import IndexType
from building3d.geom.types import PointType
from building3d.geom.zone.get_mesh import get_mesh_from_solids

logger = logging.getLogger(__name__)


class Zone:
    """Zone is a collection of solids.

    Solids do not need to touch one another.
    """

    def __init__(
        self,
        solids: Sequence[Solid] = (),
        name: str | None = None,
        uid: str | None = None,
        parent=None,
    ):
        """Initialize the zone.

        Args:
            solids: list of Solid instances
            name: name of the zone
            uid: unique id of the zone, random if None
        """
        self._parent = parent

        if name is None:
            name = random_id()
        self.name = validate_name(name)
        if uid is not None:
            self.uid = uid
        else:
            self.uid = random_id()
        self.solids: dict[str, Solid] = {}  # {Solid.name: Solid}

        for sld in solids:
            self.add_solid(sld)

        logger.info(f"Zone created: {self}")

    @property
    def children(self) -> dict[str, Solid]:
        return self.solids

    @property
    def parent(self):
        return self._parent

    @parent.setter
    def parent(self, bdg):
        self._parent = bdg

    @property
    def path(self) -> str:
        if self.parent is not None:
            p = PATH_SEP.join([self.parent.path, self.name])
            return p
        else:
            return self.name

    def add_solid(self, sld: Solid) -> None:
        """Add a Solid instance to the zone.

        Args:
            sld: solid to be added
        """
        if sld.name in self.children.keys():
            raise GeometryError(f"Solid {sld.name} already exists in {self.name}")

        # Add solid
        sld.parent = self
        self.solids[sld.name] = sld
        logger.info(f"Solid {sld.name} added: {self}")

    def get(self, abspath: str):
        """Get object by the absolute path."""
        obj = self
        while obj.parent is not None:
            obj = obj.parent
        building = obj
        return building.get(abspath)

    def bbox(self) -> tuple[PointType, PointType]:
        pts, _ = self.get_mesh()
        return bounding_box(pts)

    def get_mesh(self) -> tuple[PointType, IndexType]:
        """Get vertices and faces of all solids. Used mostly for plotting.

        This function returns faces generated by the ear-clipping algorithm.

        Return:
            tuple of vertices, shaped (num_pts, 3), and faces, shaped (num_tri, 3)
        """
        return get_mesh_from_solids(list(self.children.values()))

    def volume(self) -> float:
        """Calculate zone volume as the sum of solid volumes."""
        volume = 0.0
        for sld in self.solids.values():
            volume += sld.volume
        return volume

    def __str__(self):
        s = f"Zone(name={self.name}, "
        s += f"solids={list(self.children.keys())}, "
        s += f"id={hex(id(self))})"
        return s

    def __repr__(self):
        return self.__str__()

    def __getitem__(self, key) -> Solid:
        return self.solids[key]
